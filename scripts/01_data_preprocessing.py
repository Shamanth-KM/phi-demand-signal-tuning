# -*- coding: utf-8 -*-
"""01_data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Shamanth-KM/phi-demand-intent-lora/blob/main/notebooks/01_data_preprocessing.ipynb

# 01 - Data Preprocessing: Sales Notes Dataset Generation
## Task and Dataset Selection

**NLP Task**:  
Our NLP task is **Demand Signal Classification** from short B2B sales notes.  
Given a sales note (text input), the model must classify it into one of the predefined demand signal categories:
- Repeat Order
- Urgent Need
- Stocking Issue
- Custom Spec
- New Product Demand

This is a **multi-class single-label text classification** problem.


**Dataset Curation**:  
Since no public dataset exists for this specialized task, we curated a synthetic dataset based on realistic B2B sales communication patterns.

Each sales note is associated with one demand label, and sample phrases were carefully crafted to mimic real-world business language.

To make the dataset more realistic and introduce mild variability, we added randomized noise such as:
- Occasional missing spaces
- Lowercasing inconsistencies
- Appending urgency indicators like "ASAP" randomly
- Random minor formatting changes

This simulates real-world noisy text and helps the model generalize better during fine-tuning.


By designing the dataset ourselves, we maintain full control over class balance, phrasing diversity, and input quality, ensuring that the dataset closely matches the expected input during real-world deployment.


## Task Comparison with Other NLP Tasks

Our task demand signal classification from sales notes, is a **multi-class single-label text classification** problem.

It is similar to **sentiment analysis** because both involve classifying a piece of text into one of several categories.  
However, it differs from generation-based tasks like summarization, instruction following, code generation, and style transfer, which require producing new text rather than assigning a label.

| NLP Task | Similarity | Difference |
|----------|------------|------------|
| Sentiment Analysis | Both are text classification tasks | Sentiment targets emotional tone; we target business intent |
| Summarization | Both require understanding key content | Summarization outputs new text, ours outputs a label |
| Instruction Following | Both need semantic comprehension | Instructions require action or generation, ours doesn't |
| Code Generation | Both involve precise text understanding | Code generation creates text output, not classification |
| Style Transfer | Both involve analyzing text features | Style transfer modifies input text, ours labels it |

Understanding these differences highlights why we framed our project as a **classification** task rather than a **generation** task.
"""

# Importing required libraries
import pandas as pd
import random

# Define the different demand labels
demand_labels = {
    "Repeat Order": [
        "Client wants another batch of 1000 units like last time.",
        "They are requesting a repeat of the previous order.",
        "client needs same order as last month for product 450X",
        "Need 300 more of the units ordered last month.",
        "Another batch required urgently, same spec as previous",
        "Repeat purchase request for Model 500Y",
        "Placing a repeat request for item series 100X."
        ],

    "Urgent Need": [
        "Need urgent delivery due to market launch next week.",
        "Delivery needed immediately, client facing outage.",
        "Rush request for product A45 due to customer escalation",
        "Need emergency stock replenishment by Friday.",
        "critical shortage reported need shipment by next week",
        "Requesting rush shipping, shortage reported.",
        "inventory outage pls expedite shipping if possible"
    ],

    "Stocking Issue": [
        "Inventory running low, client requests immediate resupply.",
        "Backorders causing delays, need resupply ASAP.",
        "warehouse almost out of stock for Model Y23",
        "Stockout reported for Model X1.",
        "Out of stock reported, needs restocking.",
        "backorders increasing need quick replenishment",
        "Warehouse backorder increasing, please resupply.",
        "running low on supplies again, please arrange dispatch"
    ],

    "Custom Spec": [
        "Request for custom color matching on containers.",
        "Specification change: needs reinforced packaging.",
        "Asked for customized sizing of the packaging.",
        "Customized dimension required for part 780Y.",
        "Wants special coating on the exterior.",
        "Request for non-standard dimension for container.",
        "custom size requested for container 560Z special handling needed",
        "Request to modify packaging dimensions before shipment",
        "needs reinforced handles on boxes for safety reason"

    ],

    "New Product Demand": [
        "Trial order to test new technology batch.",
        "First order placed for updated product variant.",
        "Exploring samples for a new product line.",
        "Client exploring samples of 2024 line.",
        "trial samples needed for our new eco friendly line",
        "interest shown in 2025X prototype by client",
        "demo units requested to evaluate updated models"
    ]
}

# Create an empty list to hold the rows we create
sales_notes = []

# Samples that we might need
num_samples = 2000


# Randomly pick a label and one of its examples
for idx in range(1, num_samples + 1):
    selected_label = random.choice(list(demand_labels.keys()))
    selected_note = random.choice(demand_labels[selected_label])

    # Introduce occasional randomness: typos, extra words
    if random.random() < 0.15:  # 15% chance
        selected_note = selected_note.replace(" ", "", 1)  # Removing a space at start

    if random.random() < 0.1:   # 10% chance
        selected_note = selected_note.capitalize()  # Randomly capitalizing the first letter

    if random.random() < 0.05:  # 5% chance
        selected_note += " ASAP"  # Add urgency words


    # Creating a dictionary for the row
    row = {
        "id": idx,
        "sales_note": selected_note,
        "label": selected_label
    }

    sales_notes.append(row)


# Converting to a pandas DataFrame
sales_df = pd.DataFrame(sales_notes)
sales_df.head(10)

"""## Save the Dataset
We save the generated dataset as a CSV file for future use.
"""

# Saving the dataset to a CSV file
sales_df.to_csv("sales_notes_2000.csv", index=False)
print("Dataset saved as CSV")

"""## Summary
- Generated a synthetic dataset of 2,000 sales notes.
- Covered five demand categories.
- Saved the dataset for model training.
"""